openapi: 3.0.3
info:
  version: 'latest'
  title: Image Annotation API

servers:
  - url: 'https://annotator-api.preprod.bpartners.app'
security:
  - BearerAuth: [ ]
  - apiKeyHeader: [ ]
paths:
  '/ping':
    get:
      security: [ ]
      tags:
        - Security
      summary: Check server health
      operationId: checkHealth
      responses:
        '200':
          description: pong
          content:
            application/json:
              schema:
                type: string
                example: pong
        500:
          $ref: './api.yml#/components/responses/500'
  '/dummy':
    get:
      security: [ ]
      tags:
        - Security
      summary: Check serverless database health
      operationId: checkDbHealth
      responses:
        '200':
          description: Dummy table data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DummyComponent'
        500:
          $ref: '#/components/responses/500'

  '/jobs':
    get:
      tags:
        - Jobs
        - Admin
      summary: Get all jobs
      security: [ apiKeyHeader: [ ] ]
      operationId: getJobs
      responses:
        '200':
          description: List of all jobs
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Job'
        '500':
          $ref: '#/components/responses/500'

  '/jobs/{jobId}':
    get:
      tags:
        - Jobs
        - Admin
      security: [ apiKeyHeader: [ ] ]
      summary: get a job specified by its id
      operationId: getJob
      parameters:
        - name: jobId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: the job with the given id
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Job"
    put:
      tags:
        - Jobs
        - Admin
      security: [ apiKeyHeader: [ ] ]
      summary: Create or update a job
      operationId: saveJob
      parameters:
        - name: jobId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CrupdateJob'
      responses:
        '200':
          description: The created or updated job
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Job'
        '500':
          $ref: '#/components/responses/500'

  '/teams/{teamId}/jobs':
    get:
      tags:
        - TeamJobs
      operationId: getTeamJobs
      summary: get started team jobs
      parameters:
        - name: teamId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: get all jobs of a team
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Job"
        '500':
          $ref: '#/components/responses/500'

  '/teams/{teamId}/jobs/{jobId}':
    get:
      tags:
        - TeamJobs
      summary: get a job specified by its id and the team owner
      operationId: getTeamJobById
      parameters:
        - name: teamId
          in: path
          required: true
          schema:
            type: string
        - name: jobId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: the job identified by its id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Job'
        '500':
          $ref: '#/components/responses/500'

  '/teams/{teamId}/jobs/{jobId}/task':
    get:
      tags:
        - UserTasks
      summary: get a job task
      operationId: getUserTaskByJob
      parameters:
        - name: teamId
          in: path
          required: true
          schema:
            type: string
        - name: jobId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: the first available task from the job
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '500':
          $ref: '#/components/responses/500'
  '/teams/{teamId}/jobs/{jobId}/tasks/{taskId}':
    put:
      tags:
        - UserTasks
      summary: updates a task
      description: Updatable fields are status and userId
      operationId: updateTask
      parameters:
        - name: teamId
          in: path
          required: true
          schema:
            type: string
        - name: jobId
          in: path
          required: true
          schema:
            type: string
        - name: taskId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateTask"
      responses:
        '200':
          description: the updated task
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Task"
        '500':
          $ref: '#/components/responses/500'

  '/jobs/{jobId}/tasks':
    get:
      tags:
        - Tasks
        - Admin
      security: [ apiKeyHeader: [ ] ]
      summary: gets information about a task
      operationId: getJobTasks
      parameters:
        - name: jobId
          in: path
          required: true
          schema:
            type: string
        - in: query
          name: page
          schema:
            $ref: '#/components/schemas/Page'
        - in: query
          name: pageSize
          schema:
            $ref: '#/components/schemas/PageSize'
      responses:
        '200':
          description: A task
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '500':
          $ref: '#/components/responses/500'

  '/jobs/{jobId}/tasks/{taskId}':
    get:
      tags:
        - Tasks
        - Admin
      security: [ apiKeyHeader: [ ] ]
      summary: gets information about a task
      operationId: getJobTaskById
      parameters:
        - name: jobId
          in: path
          required: true
          schema:
            type: string
        - name: taskId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: A task
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '500':
          $ref: '#/components/responses/500'

  '/users/{userId}/tasks/{taskId}/annotations':
    put:
      tags:
        - UserTasks
      summary: annotates a task
      operationId: annotateTask
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
        - name: taskId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Annotation'
      responses:
        '200':
          description:
            Annotations on the task
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Annotation'
        '500':
          $ref: '#/components/responses/500'

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
    apiKeyHeader:
      type: apiKey
      in: header
      name: x-api-key
  responses:
    400:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BadRequestException'
    403:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/NotAuthorizedException'
    404:
      description: Not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ResourceNotFoundException'
    429:
      description: Too many requests to the API
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TooManyRequestsException'
    '500':
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/InternalServerException'
  schemas:
    Page:
      type: integer
      description: Start at `1`
    PageSize:
      type: integer
      description: Cannot exceed `500`
    DummyComponent:
      type: object
      properties:
        id:
          type: string
    CrupdateJob:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        bucketName:
          type: string
        folderPath:
          type: string
        ownerEmail:
          type: string
          format: email
        status:
          $ref: '#/components/schemas/JobStatus'
        teamId:
          type: string
        labels:
          type: array
          items:
            $ref: "#/components/schemas/Label"
    Job:
      type: object
      allOf:
        - $ref: "#/components/schemas/CrupdateJob"
      properties:
        remaining_tasks:
          type: integer
          format: int32
          minimum: 0
    JobStatus:
      type: string
      enum:
        - PENDING
        - READY
        - STARTED
        - FAILED
        - COMPLETED
    UpdateTask:
      type: object
      properties:
        id:
          type: string
        userId:
          type: string
        status:
          $ref: "#/components/schemas/TaskStatus"
    Task:
      type: object
      allOf:
        - $ref: "#/components/schemas/UpdateTask"
      properties:
        imageURI:
          type: string
    TaskStatus:
      type: string
      enum:
        - PENDING
        - UNDER_COMPLETION
        - COMPLETED
    Annotation:
      type: object
      properties:
        id:
          type: string
        taskId:
          type: string
        userId:
          type: string
        label:
          $ref: '#/components/schemas/Label'
        polygon:
          $ref: '#/components/schemas/Polygon'
    Polygon:
      type: object
      properties:
        points:
          type: array
          items:
            $ref: '#/components/schemas/Point'
    Point:
      type: object
      properties:
        x:
          type: number
          format: double
        y:
          type: number
          format: double
    Label:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
    Exception:
      type: object
      properties:
        type:
          type: string
        message:
          type: string
    InternalServerException:
      allOf:
        - $ref: '#/components/schemas/Exception'
      example:
        type: InternalServerException
        message: Unexpected error
    BadRequestException:
      allOf:
        - $ref: '#/components/schemas/Exception'
      example:
        type: BadRequestException
        message: Bad request
    NotAuthorizedException:
      allOf:
        - $ref: '#/components/schemas/Exception'
      example:
        type: NotAuthorizedException
        message: Not authorized
    ResourceNotFoundException:
      allOf:
        - $ref: '#/components/schemas/Exception'
      example:
        type: ResourceNotFoundException
        message: Resource of type <T> identified by <I> not found
    TooManyRequestsException:
      allOf:
        - $ref: '#/components/schemas/Exception'
      example:
        type: TooManyRequestsException
        message: Too many requests